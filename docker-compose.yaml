version: '3.7'
services:
    workspace_php7:
      container_name: workspace_php7
      build:
          context: ./php
          args:
            - PHP_VERSION=${DEFAULT_PHP_VERSION}
            - INSTALL_GD=${INSTALL_GD}
            - INSTALL_REDIS=${INSTALL_REDIS}
            - INSTALL_KAFKA=${INSTALL_KAFKA}
            - INSTALL_OPCACHE=${INSTALL_OPCACHE}
            - INSTALL_MYSQL_CLIENT=${INSTALL_MYSQL_CLIENT}
            - INSTALL_ZOOKEEPER=${INSTALL_ZOOKEEPER}
            - INSTALL_EXIF=${INSTALL_EXIF}
            - GITHUB_TOKEN=${GITHUB_TOKEN}
      restart: always
      volumes:
        - ${BASE_DIRECTORY}:/var/www
      depends_on:
        - mysql

    workspace_php8:
      container_name: workspace_php8
      build:
        context: ./php
        args:
          - PHP_VERSION=8.1
          - INSTALL_GD=${INSTALL_GD}
          - INSTALL_REDIS=${INSTALL_REDIS}
          - INSTALL_KAFKA=${INSTALL_KAFKA}
          - INSTALL_OPCACHE=${INSTALL_OPCACHE}
          - INSTALL_MYSQL_CLIENT=${INSTALL_MYSQL_CLIENT}
          - INSTALL_ZOOKEEPER=${INSTALL_ZOOKEEPER}
          - INSTALL_EXIF=${INSTALL_EXIF}
          - GITHUB_TOKEN=${GITHUB_TOKEN}
      restart: always
      volumes:
        - ${BASE_DIRECTORY}:/var/www
      depends_on:
        - mysql

    nginx:
      container_name: nginx
      build:
        context: ./nginx
      restart: always
      tty: true
      ports:
        - "80:80"
        - "443:443"
      volumes:
        - ${BASE_DIRECTORY}:/var/www
        - ./nginx/logs:/var/log/nginx
        - ./nginx/sites:/etc/nginx/sites-available
      depends_on:
        - workspace_php7
        - workspace_php8

    mysql:
      restart: always
      container_name: mysql
      build:
        context: ./mysql
      ports:
          - "3306:3306"
      volumes:
          - ./mysql/data:/var/lib/mysql
          - ./mysql/init:/docker-entrypoint-initdb.d
      environment:
        - MYSQL_ROOT_USER=root
        - MYSQL_ROOT_PASSWORD=root

    mysql_testing:
      container_name: mysql_testing
      build:
        context: ./mysql
      environment:
        - MYSQL_ROOT_USER=root
        - MYSQL_ROOT_PASSWORD=root
      volumes:
        - ./mysql/init:/docker-entrypoint-initdb.d
      restart: always
      tty: true
      tmpfs: /var/lib/mysql
      expose:
        - "33061"
      ports:
        - "33061:3306"
      depends_on:
        - mysql

    redis:
      container_name: redis
      image: redis:alpine
      user: root
      restart: always
      tty: true
#      volumes:
#        - ./redis/data:/data
      ports:
        - "6379:6379"

    zookeeper:
      container_name: zookeeper
      image: confluentinc/cp-zookeeper:latest
      restart: always
      tty: true
      environment:
        ZOOKEEPER_CLIENT_PORT: 2181
        ZOOKEEPER_TICK_TIME: 2000

    kafka:
      image: confluentinc/cp-kafka:latest
      container_name: kafka
      hostname: kafka
      ports:
        - "9092:9092"
      environment:
        KAFKA_BROKER_ID: 1
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
        KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      restart: always
      depends_on:
        - zookeeper
      volumes:
        - ./kafka/data:/kafka-volume

    kafdrop:
      container_name: kafdrop
      image: obsidiandynamics/kafdrop:latest
      ports:
        - "1900:9000"
      environment:
        KAFKA_BROKERCONNECT: "kafka:29092"
      restart: always
      depends_on:
        - kafka

    mailhog:
      container_name: mailhog
      image: mailhog/mailhog:latest
      logging:
        driver: 'none'  # disable saving logs
      ports:
        - "1025:1025" # smtp server
        - "8025:8025" # web ui

    taskbird-web:
      container_name: taskbird-web
      image: node:16-alpine
      volumes:
        - ${BASE_DIRECTORY}:/var/www
      working_dir: /var/www/${TASKBIRD_WEB_DIRECTORY}
      command: sh -c "yarn && yarn start"
      ports:
        - "3000:3000"
      stdin_open: true

#    taskbird-app:
#      hostname: taskbird-app.test
#      container_name: taskbird-app
#      image: node:16-alpine
#      volumes:
#        - ${BASE_DIRECTORY}:/app
#      environment:
#        - EXPO_DEVTOOLS_LISTEN_ADDRESS=0.0.0.0
##        - REACT_NATIVE_PACKAGER_HOSTNAME=${LOCAL_IP}
#      working_dir: /app/${TASKBIRD_APP_DIRECTORY}
#      command: sh -c "yarn && yarn add global expo-cli && yarn expo start -c   "
#        - 19000:19000
#        - 19001:19001
#        - 19002:19002
#        - 19006:19006
#      stdin_open: true